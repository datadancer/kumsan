Syzkaller hit 'KASAN: unknown-crash Read in p9_conn_cancel' bug.

==================================================================
BUG: KASAN: unknown-crash in p9_conn_cancel+0x2d9/0x3b0 net/9p/trans_fd.c:211
Read of size 4 at addr ffff88806881200c by task kworker/0:3/1534

CPU: 0 PID: 1534 Comm: kworker/0:3 Not tainted 5.2.0-rc4+ #70
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
Workqueue: events p9_write_work
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x75/0xae lib/dump_stack.c:113
 print_address_description mm/kasan/report.c:188 [inline]
 __kasan_report+0x17c/0x3e6 mm/kasan/report.c:326
 kasan_report+0xe/0x20 mm/kasan/common.c:650
 p9_conn_cancel+0x2d9/0x3b0 net/9p/trans_fd.c:211
 p9_write_work+0x183/0x4a0 net/9p/trans_fd.c:514
 process_one_work+0x4d1/0x8c0 kernel/workqueue.c:2269
 worker_thread+0x6e/0x780 kernel/workqueue.c:2415
 kthread+0x1ca/0x1f0 kernel/kthread.c:255
 ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:352

Allocated by task 2064:
 save_stack+0x19/0x80 mm/kasan/common.c:71
 set_track mm/kasan/common.c:79 [inline]
 __kasan_kmalloc.constprop.3+0xbc/0x120 mm/kasan/common.c:525
 slab_post_alloc_hook mm/slab.h:437 [inline]
 slab_alloc_node mm/slub.c:2748 [inline]
 slab_alloc mm/slub.c:2756 [inline]
 kmem_cache_alloc+0xa7/0x170 mm/slub.c:2761
 p9_tag_alloc net/9p/client.c:270 [inline]
 p9_client_prepare_req.part.9+0x3b/0x380 net/9p/client.c:698
 p9_client_prepare_req net/9p/client.c:735 [inline]
 p9_client_rpc+0x15e/0x880 net/9p/client.c:735
 p9_client_version net/9p/client.c:952 [inline]
 p9_client_create+0x3d0/0xac0 net/9p/client.c:1052
 v9fs_session_init+0x192/0xc80 fs/9p/v9fs.c:406
 v9fs_mount+0x67/0x470 fs/9p/vfs_super.c:120
 legacy_get_tree+0x70/0xd0 fs/fs_context.c:661
 vfs_get_tree+0x4a/0x1c0 fs/super.c:1476
 do_new_mount fs/namespace.c:2790 [inline]
 do_mount+0xba9/0xf90 fs/namespace.c:3110
 ksys_mount+0xa8/0x120 fs/namespace.c:3319
 __do_sys_mount fs/namespace.c:3333 [inline]
 __se_sys_mount fs/namespace.c:3330 [inline]
 __x64_sys_mount+0x62/0x70 fs/namespace.c:3330
 do_syscall_64+0x7e/0x1f0 arch/x86/entry/common.c:302
 entry_SYSCALL_64_after_hwframe+0x44/0xa9

Freed by task 0:
(stack is not available)

The buggy address belongs to the object at ffff888068812008
 which belongs to the cache p9_req_t of size 144
The buggy address is located 4 bytes inside of
 144-byte region [ffff888068812008, ffff888068812098)
The buggy address belongs to the page:
page:ffffea0001a20480 refcount:1 mapcount:0 mapping:ffff888068bbb740 index:0xffff888068813d90 compound_mapcount: 0
flags: 0x100000000010200(slab|head)
raw: 0100000000010200 ffff888068aa2450 ffff888068aa2450 ffff888068bbb740
raw: ffff888068813d90 0000000000100001 00000001ffffffff 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff888068811fe0: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b
 ffff888068811ff0: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b
>ffff888068812000: cc cc cc cc cc cc cc cc 02 00 00 00 bb bb bb bb
                                                       ^
 ffff888068812010: 03 00 00 00 bb bb bb bb 00 00 00 00 bb bb bb bb
 ffff888068812020: 58 f8 ff 68 80 88 ff ff 58 f8 ff 68 80 88 ff ff

Memory state around the buggy address:
 ffff888068811f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
 ffff888068811f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
>ffff888068812000: fc 0f 0f 0f 00 00 04 00 00 00 00 0f 00 00 00 00
                      ^
 ffff888068812080: ff 00 00 fc fc fc 00 00 00 00 00 00 00 00 00 00
 ffff888068812100: 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================
==================================================================
BUG: KASAN: unknown-crash in p9_client_rpc+0x4aa/0x880 net/9p/client.c:773
Read of size 4 at addr ffff88806881200c by task syz-executor605/2064

CPU: 1 PID: 2064 Comm: syz-executor605 Tainted: G    B             5.2.0-rc4+ #70
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x75/0xae lib/dump_stack.c:113
 print_address_description mm/kasan/report.c:188 [inline]
 __kasan_report+0x17c/0x3e6 mm/kasan/report.c:326
 kasan_report+0xe/0x20 mm/kasan/common.c:650
 p9_client_rpc+0x4aa/0x880 net/9p/client.c:773
 p9_client_version net/9p/client.c:952 [inline]
 p9_client_create+0x3d0/0xac0 net/9p/client.c:1052
 v9fs_session_init+0x192/0xc80 fs/9p/v9fs.c:406
 v9fs_mount+0x67/0x470 fs/9p/vfs_super.c:120
 legacy_get_tree+0x70/0xd0 fs/fs_context.c:661
 vfs_get_tree+0x4a/0x1c0 fs/super.c:1476
 do_new_mount fs/namespace.c:2790 [inline]
 do_mount+0xba9/0xf90 fs/namespace.c:3110
 ksys_mount+0xa8/0x120 fs/namespace.c:3319
 __do_sys_mount fs/namespace.c:3333 [inline]
 __se_sys_mount fs/namespace.c:3330 [inline]
 __x64_sys_mount+0x62/0x70 fs/namespace.c:3330
 do_syscall_64+0x7e/0x1f0 arch/x86/entry/common.c:302
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x440389
Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
RSP: 002b:00007ffd697a29b8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a5
RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440389
RDX: 0000000020000140 RSI: 0000000020000100 RDI: 0000000000000000
RBP: 00000000006cb018 R08: 0000000020000300 R09: 00000000004002c8
R10: 0000000000004000 R11: 0000000000000246 R12: 0000000000401c10
R13: 0000000000401ca0 R14: 0000000000000000 R15: 0000000000000000

Allocated by task 2064:
 save_stack+0x19/0x80 mm/kasan/common.c:71
 set_track mm/kasan/common.c:79 [inline]
 __kasan_kmalloc.constprop.3+0xbc/0x120 mm/kasan/common.c:525
 slab_post_alloc_hook mm/slab.h:437 [inline]
 slab_alloc_node mm/slub.c:2748 [inline]
 slab_alloc mm/slub.c:2756 [inline]
 kmem_cache_alloc+0xa7/0x170 mm/slub.c:2761
 p9_tag_alloc net/9p/client.c:270 [inline]
 p9_client_prepare_req.part.9+0x3b/0x380 net/9p/client.c:698
 p9_client_prepare_req net/9p/client.c:735 [inline]
 p9_client_rpc+0x15e/0x880 net/9p/client.c:735
 p9_client_version net/9p/client.c:952 [inline]
 p9_client_create+0x3d0/0xac0 net/9p/client.c:1052
 v9fs_session_init+0x192/0xc80 fs/9p/v9fs.c:406
 v9fs_mount+0x67/0x470 fs/9p/vfs_super.c:120
 legacy_get_tree+0x70/0xd0 fs/fs_context.c:661
 vfs_get_tree+0x4a/0x1c0 fs/super.c:1476
 do_new_mount fs/namespace.c:2790 [inline]
 do_mount+0xba9/0xf90 fs/namespace.c:3110
 ksys_mount+0xa8/0x120 fs/namespace.c:3319
 __do_sys_mount fs/namespace.c:3333 [inline]
 __se_sys_mount fs/namespace.c:3330 [inline]
 __x64_sys_mount+0x62/0x70 fs/namespace.c:3330
 do_syscall_64+0x7e/0x1f0 arch/x86/entry/common.c:302
 entry_SYSCALL_64_after_hwframe+0x44/0xa9

Freed by task 0:
(stack is not available)

The buggy address belongs to the object at ffff888068812008
 which belongs to the cache p9_req_t of size 144
The buggy address is located 4 bytes inside of
 144-byte region [ffff888068812008, ffff888068812098)
The buggy address belongs to the page:
page:ffffea0001a20480 refcount:1 mapcount:0 mapping:ffff888068bbb740 index:0xffff888068813d90 compound_mapcount: 0
flags: 0x100000000010200(slab|head)
raw: 0100000000010200 ffff888068aa2450 ffff888068aa2450 ffff888068bbb740
raw: ffff888068813d90 0000000000100001 00000001ffffffff 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff888068811fe0: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b
 ffff888068811ff0: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b
>ffff888068812000: cc cc cc cc cc cc cc cc 05 00 00 00 bb bb bb bb
                                                       ^
 ffff888068812010: 02 00 00 00 bb bb bb bb 00 00 00 00 bb bb bb bb
 ffff888068812020: 20 20 81 68 80 88 ff ff 20 20 81 68 80 88 ff ff

Memory state around the buggy address:
 ffff888068811f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
 ffff888068811f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
>ffff888068812000: fc 0f 0f 0f 00 00 04 00 00 00 00 0f 00 00 00 00
                      ^
 ffff888068812080: ff 00 00 fc fc fc 00 00 00 00 00 00 00 00 00 00
 ffff888068812100: 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================


Syzkaller reproducer:
# {Threaded:false Collide:false Repeat:false RepeatTimes:0 Procs:1 Sandbox: Fault:false FaultCall:-1 FaultNth:0 Leak:false EnableTun:false EnableNetDev:false EnableNetReset:false EnableCgroups:false EnableBinfmtMisc:false EnableCloseFds:false UseTmpDir:false HandleSegv:false Repro:false Trace:false}
mknod$loop(&(0x7f0000000080)='./file0\x00', 0x0, 0xffffffffffffffff)
r0 = openat$hpet(0xffffffffffffff9c, &(0x7f0000000180)='/dev/hpet\x00', 0x0, 0x0)
r1 = socket$inet6_udplite(0xa, 0x2, 0x88)
mount$9p_fd(0x0, &(0x7f0000000100)='./file0\x00', &(0x7f0000000140)='9p\x00', 0x4000, &(0x7f0000000300)={'trans=fd,', {'rfdno', 0x3d, r0}, 0x2c, {'wfdno', 0x3d, r1}, 0x2c, {[{@access_user='access=user'}, {@cachetag={'cachetag', 0x3d, '/dev/vcs#\x00'}}, {@aname={'aname', 0x3d, 'wlan0security+lo'}}, {@noextend='noextend'}], [{@hash='hash'}, {@fowner_lt={'fowner<'}}]}})


C reproducer:
// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, 0x20000000, 0x1000000, 3, 0x32, -1, 0);
  intptr_t res = 0;
  memcpy((void*)0x20000080, "./file0\000", 8);
  syscall(__NR_mknod, 0x20000080, 0, 0);
  memcpy((void*)0x20000180, "/dev/hpet\000", 10);
  res = syscall(__NR_openat, 0xffffffffffffff9c, 0x20000180, 0, 0);
  if (res != -1)
    r[0] = res;
  res = syscall(__NR_socket, 0xa, 2, 0x88);
  if (res != -1)
    r[1] = res;
  memcpy((void*)0x20000100, "./file0\000", 8);
  memcpy((void*)0x20000140, "9p\000", 3);
  memcpy((void*)0x20000300, "trans=fd,", 9);
  memcpy((void*)0x20000309, "rfdno", 5);
  *(uint8_t*)0x2000030e = 0x3d;
  sprintf((char*)0x2000030f, "0x%016llx", (long long)r[0]);
  *(uint8_t*)0x20000321 = 0x2c;
  memcpy((void*)0x20000322, "wfdno", 5);
  *(uint8_t*)0x20000327 = 0x3d;
  sprintf((char*)0x20000328, "0x%016llx", (long long)r[1]);
  *(uint8_t*)0x2000033a = 0x2c;
  memcpy((void*)0x2000033b, "access=user", 11);
  *(uint8_t*)0x20000346 = 0x2c;
  memcpy((void*)0x20000347, "cachetag", 8);
  *(uint8_t*)0x2000034f = 0x3d;
  memcpy((void*)0x20000350, "/dev/vcs#\000", 10);
  *(uint8_t*)0x2000035a = 0x2c;
  memcpy((void*)0x2000035b, "aname", 5);
  *(uint8_t*)0x20000360 = 0x3d;
  memcpy((void*)0x20000361, "wlan0security+lo", 16);
  *(uint8_t*)0x20000371 = 0x2c;
  memcpy((void*)0x20000372, "noextend", 8);
  *(uint8_t*)0x2000037a = 0x2c;
  memcpy((void*)0x2000037b, "hash", 4);
  *(uint8_t*)0x2000037f = 0x2c;
  memcpy((void*)0x20000380, "fowner<", 7);
  sprintf((char*)0x20000387, "%020llu", (long long)0);
  *(uint8_t*)0x2000039b = 0x2c;
  *(uint8_t*)0x2000039c = 0;
  syscall(__NR_mount, 0, 0x20000100, 0x20000140, 0x4000, 0x20000300);
  return 0;
}

